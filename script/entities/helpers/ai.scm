(define (generate-update-track-player frames time)
  (lambda (e data)
    (if (is-unbroken-line (+ (get-entity-x e) (/ (get-entity-w e) 2)) (+ (get-entity-y e) (/ (get-entity-h e) 2)) (+ (get-player-x) (/ (get-player-w) 2)) (get-player-y))
      (let ((xdiff (- (+ (get-player-x) (/ (get-player-w) 2)) (+ (get-entity-x e) (/ (get-entity-w e) 2))))
            (ydiff (- (get-player-y) (+ (get-entity-y e) (/ (get-entity-h e) 2))))
            (theta (calculate-angle (+ (get-entity-x e) (/ (get-entity-w e) 2)) (+ (get-entity-y e) (/ (get-entity-h e) 2)) (+ (get-player-x) (/ (get-player-w) 2)) (get-player-y))))
        (set-entity-xv e (* (cos theta) (get-entity-speed e)))
        (set-entity-yv e (* (sin theta) (get-entity-speed e)))
        (let ((t (get-entity-texture e)))
         (if (zero? data)
           (set-sheet-column t (modulo (+ (get-sheet-column t) 1) frames)))))
      (begin
        (set-entity-xv e 0)
        (set-entity-yv e 0)
        (set-sheet-column (get-entity-texture e) 0)))
    (modulo (+ data 1) time)))
